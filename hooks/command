#!/bin/bash
set -euo pipefail

readonly GOLANG_PLUGIN_VERSION="v2.0.0"

is_debug() {
  [[ "${BUILDKITE_PLUGIN_GOLANG_CROSS_COMPILE_DEBUG:-false}" =~ (true|on|1) ]]
}

# Returns a list of env vars in the form of BUILDKITE_PLUGIN_GOLANG_CROSS_COMPILE_TARGETS_N
# This is used to iterate through the targets later
list_targets() {
  while IFS='=' read -r name _ ; do
    if [[ $name =~ ^(BUILDKITE_PLUGIN_GOLANG_CROSS_COMPILE_TARGETS_[0-9]+) ]] ; then
      echo "${BASH_REMATCH[1]}"
    fi
  done < <(env | sort) | uniq
}

generate_pipeline() {
  echo "steps:"

  # Iterate through targets specified in the plugin config
  for target in $(list_targets) ; do
    local target_version_prop="${target}_VERSION"
    local target_goos_prop="${target}_GOOS"
    local target_goarch_prop="${target}_GOARCH"

    local target_version=${!target_version_prop}
    local target_goos=${!target_goos_prop:-}
    local target_goarch=${!target_goarch_prop:-}

    if is_debug ; then
      echo "Found target $target $target_version $target_goos $target_goarch" >&2
    fi

    local env=("GOOS=${target_goos}" "GOARCH=${target_goarch}")
    local artifact_path="${binary_prefix}-${target_goos}-${target_goarch}"
    local label=":go: ${target_version} :${target_goos}: ${target_goarch}"

    cat <<YAML
  - name: "${label}"
    command: go build -v -o '${artifact_path}' '${build}'
    artifact_paths:
      - "${artifact_path}"
    plugins:
      golang#${GOLANG_PLUGIN_VERSION}:
        import: ${import}
        version: ${target_version}
        environment:
YAML

    for env in "${env[@]}" ; do
      echo "          - $env"
    done
  done
}

if is_debug ; then
  echo "--- :hammer: Enabling debug mode"
  env | sort | grep BUILDKITE_PLUGIN_GOLANG_CROSS_COMPILE
fi

# Config that applies to all targets
default_import="buildkite.com/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
import="${BUILDKITE_PLUGIN_GOLANG_CROSS_COMPILE_IMPORT:-$default_import}"
build="${BUILDKITE_PLUGIN_GOLANG_CROSS_COMPILE_BUILD:-main.go}"
binary_prefix="${BUILDKITE_PLUGIN_GOLANG_CROSS_COMPILE_BIN_PREFIX:-$(basename "$import")}"

pipeline="$(generate_pipeline)"

if is_debug ; then
  echo "--- :pipeline: Uploading generated pipeline"
  echo "$pipeline"
fi

buildkite-agent pipeline upload <<< "$pipeline"
