#!/bin/bash
set -euo pipefail

go_build_in_docker() {
  go_version="$1"
  pkg="$2"
  goos="$3"
  goarch="$4"
  shift 4

  docker run \
    -v "${PWD}:/go/src/${pkg}" \
    -w "/go/src/${pkg}" \
    -e "GOOS=${goos}" -e "GOARCH=${goarch}" -e "CGO_ENABLED=0" \
    --rm "golang:${go_version}" \
    go build "$@"
}

build_step() {
  local label="$1"

  cat <<YAML
  - name: ":go: ${label}"
    plugins:
      - golang-build#master:
          build: main.go
          package: github.com/buildkite/github-release
          vars:
            "main.Version": "${BUILDKITE_TAG}"
          flags: ["-s", "-w"]
          version: 1.10.2
          goos: linux
          goarch: amd64
YAML
}

if [[ "${BUILDKITE_PLUGIN_GOLANG_BUILD_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "--- :hammer: Enabling debug mode"
  env | sort | grep BUILDKITE_PLUGIN_GOLANG_BUILD
fi

goos="${BUILDKITE_PLUGIN_GOLANG_BUILD_GOOS:-linux}"
goarch="${BUILDKITE_PLUGIN_GOLANG_BUILD_GOARCH:-amd64}"
go_version="${BUILDKITE_PLUGIN_GOLANG_BUILD_GOLANG_VERSION:-latest}"
source_files="${BUILDKITE_PLUGIN_GOLANG_BUILD_BUILD:-main.go}"
pkg="${BUILDKITE_PLUGIN_GOLANG_BUILD_PACKAGE?}"

pkg_basename=$(basename "$pkg")
build_file="build/${pkg_basename}_${goos}_${goarch}"

rm -rf build/
mkdir -p build/

go_args=("-o" "$build_file" "-v" "$source_files")

echo "+++ Building ${pkg_basename} for ${goos}/${goarch} with golang:${go_version} :golang:"
go_build_in_docker "$go_version" "$pkg" "$goos" "$goarch" "${go_args[@]}"

echo "~~~ Uploading artifacts"
buildkite-agent artifact upload "${build_file}"
