#!/bin/bash
set -euo pipefail

go_build_in_docker() {
  go_version="$1"
  pkg="$2"
  goos="$3"
  goarch="$4"
  shift 4

  docker run \
    -v "${PWD}:/go/src/${pkg}" \
    -w "/go/src/${pkg}" \
    -e "GOOS=${goos}" -e "GOARCH=${goarch}" -e "CGO_ENABLED=0" \
    --rm "golang:${go_version}" \
    go build "$@"
}

debug_mode='off'
if [[ "${BUILDKITE_PLUGIN_GOLANG_BUILD_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "--- :hammer: Enabling debug mode"
  debug_mode='on'
  set -x
  env | sort | grep BUILDKITE_PLUGIN_GOLANG_BUILD
fi

# # Parse targets
# while IFS='=' read -r name _ ; do
#   if [[ $name =~ ^(BUILDKITE_PLUGIN_GOLANG_BUILD_TARGETS(_[0-9]+)?) ]] ; then
#     echo "parsed env[$name] = [${!name}]"
#   fi
# done < <(env | sort)


goos="${BUILDKITE_PLUGIN_GOLANG_BUILD_GOLANG_OS:-linux}"
goarch="${BUILDKITE_PLUGIN_GOLANG_BUILD_GOLANG_ARCH:-amd64}"
go_version="${BUILDKITE_PLUGIN_GOLANG_BUILD_GOLANG_VERSION:-latest}"
build_file="${BUILDKITE_PLUGIN_GOLANG_BUILD_BUILD:-main.go}"
pkg="$BUILDKITE_PLUGIN_GOLANG_BUILD_PACKAGE"

rm -rf build/
mkdir -p build/

echo "+++ Building github-release for $goos/$goarch with golang:${go_version} :golang:"
go_build_in_docker "$go_version" "$pkg" "$goos" "$goarch" "$build_file"

# buildkite-agent artifact upload "${DISTFILE}"
